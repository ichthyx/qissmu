#!/bin/bash
#########################################################################################
# QISSMU (Codename: ANTIVAGRANT) v.0.2
# Copyright Ichthyx 2021 - 2023
# License : GNU GPL V3
#
##### Bash default for good behavior ####################################################
set -o errexit # (exit if error)
#
# Color variables:
GREEN='\033[0;32m'
RED='\033[0;31m'
RESET='\033[0m'
CACHEDIR=".qissmucache" # Cache directory

# Verify JQ
if [ ! "$(which jq)" ]; then
    echo -e "${RED}[!] jq not found please install it to run.${RESET}"
    exit 1
fi

##### Variables #########################################################################
# Default settings if empty
if [[ -z "$CLOUD_IMAGE" && -z "$HASH" ]];
then
  DEFAULT_DISTRO="debian12"
  CLOUD_IMAGE=$(jq -r --arg DEFAULT_DISTRO "$DEFAULT_DISTRO" '.[$DEFAULT_DISTRO]."CLOUD_IMAGE"' cloud-images.json)
  HASH=$(jq -r --arg DEFAULT_DISTRO "$DEFAULT_DISTRO" '.[$DEFAULT_DISTRO]."HASH"' cloud-images.json)
fi

# DEFAULT VM Variables:
if [[ -z "$VM_USER_NAME" ]]; then VM_USER_NAME="dev"; fi
if [[ -z "$VM_USER_PASSWORD" ]]; then VM_USER_PASSWORD="1234"; fi
if [[ -z "$VM_ROOT_PASSWORD" ]]; then VM_ROOT_PASSWORD=VM_USER_PASSWORD; fi
if [[ -z "$VM_MEMORY_SIZE" ]]; then VM_MEMORY_SIZE="4096"; fi
if [[ -z "$NETWORK_BRIDGE" ]]; then NETWORK_BRIDGE="br0"; fi
# NOTE : NETWORK_USERMODE_PORTREDIR=(tcp::5432-:5432 tcp::443-:443 tcp::2222-:22 udp::53-:53)
if [[ -z "$NETWORK_USERMODE_PORTREDIR" ]]; then NETWORK_USERMODE_PORTREDIR=(tcp::2222-:22); fi
if [[ -z "$HOST_CPU_CORES" ]]; then HOST_CPU_CORES=$(nproc --all); fi
if [[ -z "$QCOW_FILE" ]]; then QCOW_FILE=$(echo "$CLOUD_IMAGE" | awk -F '/' '{print $NF}'); fi
if [[ -z "$RESIZE" ]]; then RESIZE="5G"; fi
# Custom settings:
# BTRFS_NOCOW=1
# TODO: SSH_KEY=""
# TODO: QEMU_CUST_ARGS=""


#########################################################################################
# Checking Arguments :
#########################################################################################
# TODO: better -help
while [ $# -gt 0 ]; do
  case "$1" in
    --bridge|-b)
      USE_BRIDGE=1;;
    --clear|-c)
      CLEAN=1;;
    --distro|-d)
      if [[ "$1" != *=* ]]; then shift; fi # Value is next arg if no `=`
      QUICK="${1#*=}"
      ;;
    --poweroff|-pw)
      POWEROFF=true
      ;;
    --status|-s)
      STATUS=true
      ;;
    --help|-h)
      echo "qissmu - [version 0.2]"
      echo "--bridge|-b            use bridge"
      echo "--clear|-c             delete cache folder"
      echo "--distro|-d debian     quickly dl and boot a debian image"
      echo "--poweroff|-pw         try to shutdown the vm with qemu-guest-agent"
      exit 0
      ;;
    *)
      >&2 echo -e "${RED}[!] Invalid argument.${RESET}"
      exit 1
      ;;
  esac
  shift
done


#########################################################################################
# every step is a function for better readability.
#########################################################################################$


function check_dep() {
  # Archlinux : pacman -S wget qemu libisoburn openbsd-netcat bridge-utils
  # Debian : apt install wget qemu libisoburn1 netcat-openbsd bridge-utils
  if [ ! "$(which wget)" ]; then
      echo -e "${RED}[!] wget not found please install it to run.${RESET}"
      exit 1
  elif [ ! "$(which qemu-system-x86_64)" ]; then
      echo -e "${RED}[!] qemu not found please install it to run.${RESET}"
      exit 1
  elif [ ! "$(which xorriso)" ]; then
      echo -e "${RED}[!] libisoburn not found please install it to run.${RESET}"
      exit 1
  elif [ ! "$(which nc)" ]; then
      echo -e "${RED}[!] netcat not found please install it to run.${RESET}"
      exit 1
  elif [ ! "$(which brctl)" ]; then
      echo -e "${RED}[!] bridge-utils not found please install it to run.${RESET}"
      exit 1
  fi
}


function quickboot() {
  if [[ -n "$QUICK" ]]; 
  then
    CLOUD_IMAGE=$(jq -r --arg DISTRO "$QUICK" '.[$DISTRO]."CLOUD_IMAGE"' cloud-images.json)
    HASH=$(jq -r --arg DISTRO "$QUICK" '.[$DISTRO]."HASH"' cloud-images.json)
    if [ "$CLOUD_IMAGE" = "null" ] || [ "$HASH" = "null" ]; 
    then
      echo -e "${RED}[!] Image not found.${RESET}"
      exit 1
    fi
  fi
}


function clear_cache() {
  if [[ -n "$CLEAN" ]];
  then
      rm -rfv "${CACHEDIR}"
      exit
  fi
}


function download_and_verify() {
  mkdir -p "${CACHEDIR}"
  mkdir -p "${CACHEDIR}/cloudinit"
  echo -e "${GREEN}[i] Downloading image...${RESET}"
  wget -nc "$CLOUD_IMAGE" -P "${CACHEDIR}"
  #TODO: 
  #wget -nc $HASH -O "${CACHEDIR}/CHECKSUM"
  #wget with -nc and -O exit 1 if already exist
  curl -L "$HASH" -o "${CACHEDIR}/CHECKSUM"
  IMG_ALREADY_USED="${CACHEDIR}/IMG_ALREADY_USED"
  if ! test -f "$IMG_ALREADY_USED"; then
    echo -e "${GREEN}[i] Checking CHECKSUM...${RESET}"
    cd "${CACHEDIR}"
    shasum -c CHECKSUM 2> /dev/null | grep "$QCOW_FILE"
    echo -e "${GREEN}[i] Checksum: OK${RESET}"
    cd ..

    # Resize if needed
    if [[ -n "$RESIZE" ]];
    then
        echo -e "${GREEN}[i] Resizing QCOW...${RESET}"
        qemu-img resize "${CACHEDIR}/${QCOW_FILE}" +"${RESIZE}"
    fi

    # NOCOW for BTRFS
    if [[ -n "$BTRFS_NOCOW" ]];
    then
        chattr +C "${CACHEDIR}/${QCOW_FILE}"
    fi
  fi
}


function generate_cloudinit_iso {
  if ! test -f "$IMG_ALREADY_USED"; then
    echo -e "${GREEN}[i] Generating cloud-init iso...${RESET}"
    cat > "${CACHEDIR}/cloudinit/user-data"<< EOF
#cloud-config
# vim: syntax=yaml
ssh_pwauth: True
chpasswd:
  list: |
    root:${VM_ROOT_PASSWORD}
  expire: False
users:
  - name: ${VM_USER_NAME}
    sudo: ALL=(ALL) ALL
    shell: /bin/bash
    plain_text_passwd: "${VM_USER_PASSWORD}"
    lock_passwd: False
network:
  version: 1
  config:
  - type: physical
    name: eth0
    subnets:
      - type: dhcp
package_update: true
packages:
  - qemu-guest-agent
runcmd:
  - [systemctl, daemon-reload]
  - [systemctl, enable, qemu-guest-agent]
  - [systemctl, start, qemu-guest-agent]
  - echo CLOUD-INIT ENDED
growpart:
  mode: auto
  devices: ['/']
  ignore_growroot_disabled: false
EOF

    touch "${CACHEDIR}/cloudinit/meta-data"
    xorriso -as genisoimage -output "${CACHEDIR}/cloud-init.iso" -volid CIDATA -joliet -rock "${CACHEDIR}/cloudinit/user-data" "${CACHEDIR}/cloudinit/meta-data"
  fi # END if IMG_ALREADY_USED/CREATED
}


function initialize_network {
  # 1 (default) User mode network
  # 2 Bridge
  if [[ -n "$USE_BRIDGE" ]];
  then
      # Bridge network :
      # tap exist ? if no create
      if ! ip -c a | grep -q tap;
      then
          # create tap device and add in to bridge $NETWORK_BRIDGE
          echo -e "${GREEN}[i] Asking sudo for creating tap device... ${RESET}"
          sudo ip tuntap add dev tap0 mode tap
          sudo ip link set tap0 up promisc on
          sudo brctl addif "${NETWORK_BRIDGE}" tap0
      fi
      NETWORK_PARAMS="-device virtio-net,netdev=t0,id=nic0 -netdev tap,id=t0,ifname=tap0,script=no,downscript=no"
  else
      # Port redirection network
      QEMU_HOSTFWD=""
      for value in "${NETWORK_USERMODE_PORTREDIR[@]}";
      do
        QEMU_HOSTFWD+="hostfwd=${value},";
      done;
      NETWORK_PARAMS="-device virtio-net,netdev=quissmunet0 -netdev user,id=quissmunet0,${QEMU_HOSTFWD::-1}"
  fi
}


function launch_qemu {
  #TODO: display optional
  echo -e "${GREEN}[i] Launching QEMU...${RESET}"
  qemu-system-x86_64 -enable-kvm \
  -cpu host \
  -smp "${HOST_CPU_CORES}" \
  -m ${VM_MEMORY_SIZE} \
  -chardev socket,path="${CACHEDIR}/qga.sock",server=on,wait=off,id=qga0 \
  -device virtio-serial \
  -device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0 \
  -cdrom "${CACHEDIR}/cloud-init.iso" \
  ${NETWORK_PARAMS} \
  -drive file="${CACHEDIR}/${QCOW_FILE}",media=disk,if=virtio \
  -display sdl &

  touch "${CACHEDIR}/IMG_ALREADY_USED" # Dont check checksum and recreate image next time...
  # TODO: write image filename inside + | grep ==> True if found
}


function get_ip {
  if [[ -n "$USE_BRIDGE" ]];
  then
    echo -e "${GREEN}[i] Waiting for VM to start...${RESET}"

    # we wait for qmp to answer
    while [[ $(echo '{"execute":"guest-sync", "arguments":{"id": 1234}}' | timeout 1 nc -U "${CACHEDIR}/qga.sock") != '{"return": 1234}' ]]
    do
      sleep 1
    done

    echo -e "${GREEN}[i] VM started asking ip${RESET}"

    QISSMU_IP_ADDR=$(echo '{"execute": "guest-network-get-interfaces"}' | timeout 1 nc -U "${CACHEDIR}/qga.sock" | jq '.return[1]."ip-addresses"[0]."ip-address"' | sed 's/"//g')

    echo -e "${GREEN}[i] IP ADDRESS of VM is : ${QISSMU_IP_ADDR}${RESET}"
  else
    QISSMU_IP_ADDR="127.0.0.1:${NETWORK_USERMODE_SSHPORT}"
  fi
}

function poweroff {
  if [[ -n "$POWEROFF" ]];
  then
    while [[ $(echo '{"execute":"guest-sync", "arguments":{"id": 1234}}' | timeout 1 nc -U "${CACHEDIR}/qga.sock") != '{"return": 1234}' ]]
    do
      sleep 1
    done
    echo '{"execute": "guest-shutdown"}' | timeout 1 nc -U "${CACHEDIR}/qga.sock"
    echo -e "${GREEN}[i] shutdown signal sended to vm...${RESET}"
    exit 0
  fi
}

function status {
  if [[ -n "$STATUS" ]];
  then
    while [[ $(echo '{"execute":"guest-sync", "arguments":{"id": 1234}}' | timeout 1 nc -U "${CACHEDIR}/qga.sock") != '{"return": 1234}' ]]
    do
      sleep 1
    done
    
    QISSMU_IP_ADDR=$(echo '{"execute": "guest-network-get-interfaces"}' | timeout 1 nc -U "${CACHEDIR}/qga.sock" | jq '.return[1]."ip-addresses"[0]."ip-address"' | sed 's/"//g')

    echo -e "${GREEN}[i] VM is running and IP-ADDRESS is : ${QISSMU_IP_ADDR}${RESET}"
    exit 0
  fi
}

# MAIN :
check_dep
status
poweroff
quickboot
clear_cache
download_and_verify
generate_cloudinit_iso
initialize_network
launch_qemu
get_ip
